<!--Version: 5.09.34.16-GTNH -->
<!--Date: 2021/05/5 -->
<!--Author: Amamiya-Nagisa -->
<!--Editor: JimJokes, KuroPeach -->

<!--Version: 5.09.34.16-GTNH -->
<!--Date: 2022/08/8 -->
<oo>
    <init>
        var GregTech_API = Java.type('gregtech.api.GregTechAPI');
        var GT_Utility = Java.type('gregtech.api.util.GTUtility');
        var GT_MetaTileEntity_BasicBatteryBuffer = Java.type('gregtech.api.metatileentity.implementations.MTEBasicBatteryBuffer');
        var GT_MetaTileEntity_Charger = Java.type('gregtech.common.tileentities.machines.basic.MTECharger');
        var GT_MetaTileEntity_Transformer = Java.type('gregtech.api.metatileentity.implementations.MTETransformer');

        function getFormatNumber(mNumber){
            return GT_Utility.formatNumbers(mNumber)
        }

        function getColoredTier(vol){
            return GT_Utility.getColoredTierNameFromVoltage(vol)
        }

        function getCableVoltage(mID){
            var tileEntity = GregTech_API.METATILEENTITIES[mID];
            if (tileEntity.isSimpleMachine()){return tileEntity.mVoltage}
        }

        function getCableLoss(mID){
            var tileEntity = GregTech_API.METATILEENTITIES[mID];
            if (tileEntity.isSimpleMachine()){return tileEntity.mCableLossPerMeter}
        }

        function getAmperage(mID){
            var tileEntity = GregTech_API.METATILEENTITIES[mID];
            if (tileEntity.isSimpleMachine()){return tileEntity.mAmperage}
        }

        function getMachineVoltage(mID){
            var tileEntity = GregTech_API.METATILEENTITIES[mID];
            if (tileEntity.isElectric()){return tileEntity.maxEUInput()?tileEntity.maxEUInput():tileEntity.maxEUOutput()}
        }

        function getVoltageIn(mID){
            return GregTech_API.METATILEENTITIES[mID].maxEUInput();
        }

        function getVoltageOut(mID){
            return GregTech_API.METATILEENTITIES[mID].maxEUOutput();
        }

        function getAmpereOut(mID){
            var tileEntity = GregTech_API.METATILEENTITIES[mID];
            if (tileEntity.isEnetOutput()) {return tileEntity.maxAmperesOut()}
        }

        function getAmpereIn(mID){
            var tileEntity = GregTech_API.METATILEENTITIES[mID];
            if (tileEntity.isEnetInput()) {return tileEntity.maxAmperesIn()}
        }

        function isBetteryBuffer(mID){
            return GregTech_API.METATILEENTITIES[mID] instanceof GT_MetaTileEntity_BasicBatteryBuffer
        }

        function isCharger(mID){
            return GregTech_API.METATILEENTITIES[mID] instanceof GT_MetaTileEntity_Charger
        }

        function isTransformer(mID){
            return GregTech_API.METATILEENTITIES[mID] instanceof GT_MetaTileEntity_Transformer
        }

        function formatBytes(bytes) {
            if (bytes === 0) return 0;
            var k = 1000,
            sizes = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'],
            i = Math.floor(Math.log(bytes) / Math.log(k));
            if(sizes[i]){return (bytes / Math.pow(k, i)).toFixed(i==0?0:2)+sizes[i]}
            return bytes
        }

        function formatTimes(ticks) {
            if(ticks != undefined){
                var day=hour=min=second=0, result="", negative=ticks<0 ? 1:0;
                ticks=Math.abs(ticks);
                if (ticks>1728000){
                    day=Math.floor(ticks/1728000);
                    ticks-=day*1728000;
                    result+=day+"天";
                }
                if (ticks>72000||day>0){
                    hour=Math.floor(ticks/72000);
                    ticks-=hour*72000;
                    result+=hour+"时";
                }
                if (ticks>1200||day>0||hour>0){
                    min=Math.floor(ticks/1200);
                    ticks-=min*1200;
                    result+=min+"分"
                }
                second = ticks/20;
                second=(day+hour+min)>0||ticks>200 ? Math.floor(second):second.toFixed(2);
                result+=second+"秒";
                return negative ? result="-"+result : result;
            }
        }
    </init>
    <tileentity id="BaseMetaTileEntity">

        <line displayname="机器加工">
            if (nbt['mWorks'] == 0) {
                return GREEN + '开启'
            }
            if (nbt['mWorks'] == 1) {
                return RED + '关闭'
            }
        </line>
        <line displayname="批处理">
            if (nbt['batchMode'] == 1) return GOLD + "开启";
        </line>
        <!--锅炉：温度 -->
        <line displayname="hud.msg.temperature">
            if ([100, 105, 114].indexOf(nbt['mID']) > -1) {
                return nbt['mTemperature'] + " / 500" + WHITE + " C"
            }
            if ([101, 102].indexOf(nbt['mID']) > -1) {
                return nbt['mTemperature'] + " / 1000" + WHITE + " C"
            }
            if (nbt['mID'] == 753) {
                return nbt['mTemperature'] + " / 1250" + WHITE + " C"
            }
            if (nbt['mID'] == 754) {
                return nbt['mTemperature'] + " / 1500" + WHITE + " C"
            }
            if (nbt['mID'] == 755) {
                return nbt['mTemperature'] + " / 1750" + WHITE + " C"
            }
        </line>

        <line displayname="额定电压">
            if (!isTransformer(nbt['mID'])) {
                var vol = getMachineVoltage(nbt['mID']);
                if (vol) {
                    return GREEN + getFormatNumber(vol) + ' (' + getColoredTier(vol) + GREEN + ')' + WHITE + ' EU/t'
                }
            }
        </line>

        <!--变压器-->
        <line displayname='输入电压'>
            if (isTransformer(nbt['mID'])) {
                var vol;
                if (nbt['mWorks'] == 0) {
                    vol = getVoltageIn(nbt['mID']);
                } else if (nbt['mWorks'] == 1) {
                    vol = getVoltageOut(nbt['mID']);
                }
                if (vol) {
                    return GREEN + getFormatNumber(vol) + ' (' + getColoredTier(vol) + GREEN + ')' + WHITE + ' EU/t'
                }
            }
        </line>
        <line displayname='输出电压'>
            if (isTransformer(nbt['mID'])) {
                var vol;
                if (nbt['mWorks'] == 0) {
                    vol = getVoltageOut(nbt['mID']);
                } else if (nbt['mWorks'] == 1) {
                    vol = getVoltageIn(nbt['mID']);
                }
                if (vol) {
                    return GREEN + getFormatNumber(vol) + ' (' + getColoredTier(vol) + GREEN + ')' + WHITE + ' EU/t'
                }
            }
        </line>

        <!--能源仓/普通机器-->
        <line displayname="输入电流">
            if (isCharger(nbt['mID'])) return;
            var ampere;
            if (isBetteryBuffer(nbt['mID'])) {
                ampere = nbt['Inventory'].length;
                return YELLOW + ampere * 2 + WHITE + ' 安';
            } else if (isTransformer(nbt['mID']) && nbt['mWorks'] == 1) {
                ampere = getAmpereOut(nbt['mID']);
            } else {
                ampere = getAmpereIn(nbt['mID']);
            }
            if (ampere != undefined) {
                return YELLOW + ampere + WHITE + ' 安';
            }
        </line>

        <!--发电机/动力仓  -->
        <line displayname="输出电流">
            if (isCharger(nbt['mID'])) return;
            var ampere;
            if (isBetteryBuffer(nbt['mID'])) {
                ampere = nbt['Inventory'].length;
            } else if (isTransformer(nbt['mID']) && nbt['mWorks'] == 1) {
                ampere = getAmpereIn(nbt['mID']);
            } else {
                ampere = getAmpereOut(nbt['mID']);
            }
            if (ampere != undefined) {
                return YELLOW + ampere + WHITE + ' 安';
            }
        </line>

        <!--电力机器：功率 -->
        <line displayname="hud.msg.greg.power">
            if (nbt['mID'] != 1154)
                if (nbt['mEUt'] != undefined && nbt['mEUt'] != 0 && nbt['mID'] != 1020 && nbt['mID'] != 1021 && nbt['mID'] != 1022 && nbt['mID'] != 1023 && nbt['mID'] != 31041)
                    if (nbt['mStoredSteam'] == 0)
                        if (nbt['mSolderingTool'] != 0) {
                            return YELLOW + Math.abs(nbt['mEUt']) + WHITE + " EU/t"
                        }
        </line>

        <!--多方块机器于未完全修复情况下的功率 -->
        <line displayname="hud.msg.greg.power.unfix">
            if (nbt['mEUt'] != 0)
                if (nbt['mEUt'] != undefined)
                    if (nbt['mWrench'] == 0 || nbt['mScrewdriver'] == 0 || nbt['mSoftHammer'] == 0 || nbt['mHardHammer'] == 0 || nbt['mSolderingTool'] == 0 || nbt['mCrowbar'] == 0) {
                        return YELLOW + Math.abs(nbt['mEUt']) * 1.1 + WHITE + " EU/t"
                    }
        </line>

        <!--蒸汽机器：功率 -->
        <line displayname="hud.msg.greg.requiredsteam">
            if (nbt['mEUt'] != 0 && nbt['mActive'] == 1)
                if (nbt['mEUt'] != undefined)
                    if (nbt['mStoredSteam'] != 0 || nbt['mID'] == 31041) {
                        return YELLOW + Math.abs(nbt['mEUt']) * 2 + WHITE + " mB/t"
                    }
        </line>
        <line displayname="无线同步">
            if (nbt['mID'] == 13106)
                if (nbt['wireless_mode'] == 1) {
                    return "还剩" + YELLOW + formatTimes(6000 - nbt['wireless_mode_cooldown']);
                } else return RED + "关闭";
        </line>
        <!--机器：加工进度 -->
        <line displayname="hud.msg.progress">
            if (nbt['mMaxProgresstime'] != 0)
                if (nbt['mID'] != 1154 && nbt['mID'] != 1131 && nbt['mID'] != 1020 && nbt['mID'] != 1021 && nbt['mID'] != 1022 && nbt['mID'] != 1023 && nbt['mID'] != 1171)
                    if (nbt['mMaxProgresstime'] != undefined) {
                        var result = '',
						max = nbt['mMaxProgresstime'],
						remain = max - nbt['mProgresstime'],
						percent = nbt['mProgresstime'] / max * 100;
                        round = Math.log(percent) / Math.log(0.1),
						percent = percent.toFixed(Math.ceil((round > 2) ? round : 2));
                        result += (round > 2 ? Number(percent) : percent) + WHITE + '%' + '\\n' + "需耗时" + WHITE + formatTimes(max) + TAB + ALIGNRIGHT + "剩余";
                        if ((100 / 3) > percent) {
                            result = RED + result + RED + formatTimes(remain);
                        } else if ((100 / 1.5) > percent) {
                            result = YELLOW + result + YELLOW + formatTimes(remain);
                        } else {
                            result = GREEN + result + GREEN + formatTimes(remain);
                        }
                        return result;
                    }
        </line>
        <line displayname="工作模式">
            if (nbt['mID'] == 1132)
                switch (nbt['ssMode']) {
                    case 0:
                        return YELLOW + "粉碎-洗矿-热离-粉碎";
                    case 1:
                        return YELLOW + "粉碎-洗矿-粉碎-离心";
                    case 2:
                        return YELLOW + "粉碎-粉碎-离心";
                    case 3:
                        return YELLOW + "粉碎-洗矿-筛选";
                    case 4:
                        return YELLOW + "粉碎-浸洗-粉碎-离心";
                }
            if (nbt['mID'] == 860)
                switch (nbt['mInternalMode']) {
                    case 0:
                        return "\\n" + YELLOW + "压缩机-电路20" + "\\n" + YELLOW + "车床-电路21" + "\\n" + YELLOW + "磁化机-电路22";
                    case 1:
                        return "\\n" + YELLOW + "发酵槽-电路20" + "\\n" + YELLOW + "流体提取机-电路21" + "\\n" + YELLOW + "物品提取机-电路22";
                    case 2:
                        return "\\n" + YELLOW + "光刻机-电路20" + "\\n" + YELLOW + "高压釜-电路21" + "\\n" + YELLOW + "流体固化-电路22";
                }
            if (nbt['mID'] == 32018)
                switch (nbt['RunningMode']) {
                    case 0:
                        return YELLOW + "精密模式";
                    case 1:
                        return YELLOW + "常规模式";
                }
            if (nbt['mID'] == 792)
                switch (nbt['mFormingMode']) {
                    case 0:
                        return YELLOW + "大卷板";
                    case 1:
                        return YELLOW + "大冲压";
                }
            if (nbt['mID'] == 850)
                switch (nbt['mMode']) {
                    case 0:
                        return YELLOW + "洗矿厂";
                    case 1:
                        return YELLOW + "简易洗矿厂";
                    case 2:
                        return YELLOW + "化学浸洗机";
                }
            if (nbt['mID'] == 799)
                switch (nbt['mMode']) {
                    case 0:
                        return YELLOW + "质量发生器";
                    case 1:
                        return YELLOW + "回收机";
                }
            if (nbt['mID'] == 995)
                switch (nbt['mDehydratorMode']) {
                    case 0:
                        return YELLOW + "真空炉";
                    case 1:
                        return YELLOW + "脱水机";
                }
            if (nbt['mID'] == 31021)
                switch (nbt['mMode']) {
                    case 0:
                        return YELLOW + "蒸馏塔";
                    case 1:
                        return YELLOW + "蒸馏室";
                }
            if (nbt['mID'] == 862)
                switch (nbt['mPlasmaMode']) {
                    case 0:
                        return YELLOW + "普通电弧炉";
                    case 1:
                        return YELLOW + "等离子电弧炉";
                }
            if (nbt['mID'] == 992)
                switch (nbt['mCuttingMode']) {
                    case 0:
                        return YELLOW + "切片机";
                    case 1:
                        return YELLOW + "切割机";
                }
        </line>

        <!--蒸汽存量 -->
        <line displayname="hud.msg.storedsteam">
            if (nbt['mSteam']['Amount'] != undefined) {
                return nbt['mSteam']['Amount'] + " mB"
            }
        </line>
        <line displayname="hud.msg.storedsteam">
            if (nbt['mStoredSteam'] != 0) {
                return nbt['mStoredSteam'] + " mB"
            }
        </line>

        <!--超净室 -->
        <line displayname="洁净度">
            if (nbt['mID'] == 1172) {
                return YELLOW + (nbt['mEfficiency'] / 100).toFixed(0) + WHITE + " %"
            }
        </line>

        <!--大型热交换器：蒸汽生产速度 -->
        <line displayname="hud.msg.greg.output">
            if (nbt['mActive'] != 0) if (nbt['mEUt'] != undefined) if (nbt['mID'] == 1154)
                if (nbt['superheated'] == 0) {
                    return GREEN + "蒸汽: " + YELLOW + Math.abs(nbt['mEUt']) * 2 + WHITE + " mB/t"
                }
        </line>

        <!--大型热交换器：过热蒸汽生产速度 -->
        <line displayname="hud.msg.greg.output">
            if (nbt['mActive'] != 0) if (nbt['mEUt'] != undefined) if (nbt['mID'] == 1154)
                if (nbt['superheated'] == 1) {
                    return GREEN + "过热蒸汽: " + YELLOW + Math.abs(nbt['mEUt']) + WHITE + " mB/t"
                }
        </line>

        <!--大型热交换器：效率 -->
        <line displayname="效率">
            if (nbt['mActive'] != 0)
                if (nbt['mID'] == 1154) {
                    return YELLOW + ((nbt['mEfficiency']) / 100).toFixed(0) + WHITE + " %"
                }
        </line>

        <!--大型涡轮机：转子耐久 -->
        <line displayname="转子耐久">
            var a = nbt['Inventory']['0']['tag']['GT.ToolStats']['Damage'],
            b = nbt['Inventory']['0']['tag']['GT.ToolStats']['MaxDamage'];
            if (nbt['mEUt'] != undefined)
                if (nbt['mID'] == 1131 || nbt['mID'] == 865 || nbt['mID'] == 866 || nbt['mID'] == 1151 || nbt['mID'] == 1152 || nbt['mID'] == 1153) {
                    return YELLOW + ((1 - a / b) * 100).toFixed(2) + WHITE + " %"
                }
        </line>

        <!--大型涡轮机：效率 -->
        <line displayname="效率">
            if (nbt['mEfficiency'] != 0) if (nbt['mEfficiency'] != undefined)
                if (nbt['mID'] == 1131 || nbt['mID'] == 865 || nbt['mID'] == 866 || nbt['mID'] == 1151 || nbt['mID'] == 1152 || nbt['mID'] == 1153) {
                    return YELLOW + ((nbt['mEfficiency']) / 100).toFixed(0) + WHITE + " %"
                }
        </line>

        <!--大型涡轮机：是否运行 -->
        <line displayname="状态">
            if (nbt['mEUt'] != undefined)
                if (nbt['mID'] == 1131 || nbt['mID'] == 865 || nbt['mID'] == 866 || nbt['mID'] == 1151 || nbt['mID'] == 1152 || nbt['mID'] == 1153) {
                    switch (nbt['mActive']) {
                        case 0:
                            return RED + "停止运行";
                            break;
                        case 1:
                            return GREEN + "运行正常";
                            break;
                    }
                }
        </line>

        <!--大型锅炉：蒸汽生产速度 -->
        <line displayname="蒸汽生产">
            if (nbt['mActive'] != 0) if (nbt['mEUt'] != undefined)
                if (nbt['mID'] == 1020 || nbt['mID'] == 1021 || nbt['mID'] == 1022 || nbt['mID'] == 1023) {
                    return YELLOW + Math.abs(nbt['mEUt']) * 2 + WHITE + " mB/t"
                }
        </line>

        <!--大型柴油引擎：效率 -->
        <line displayname="效率">
            if (nbt['mEfficiency'] != 0) if (nbt['mEfficiency'] != undefined)
                if (nbt['mID'] == 1171) {
                    return YELLOW + ((nbt['mEfficiency']) / 100).toFixed(0) + WHITE + " %"
                }
        </line>

        <!--多方块机器需要维修  -->
        <line displayname="注意 !">
            if (nbt['mWrench'] == 0 || nbt['mScrewdriver'] == 0 || nbt['mSoftHammer'] == 0 || nbt['mHardHammer'] == 0 || nbt['mSolderingTool'] == 0 || nbt['mCrowbar'] == 0) {
                var result = '';
                result += RED + "xx 需要维护 xx";
                if (nbt['mWrench'] == 0) {
                    result += '\\n' + '注意 !' + TAB + ALIGNRIGHT + RED + "xx 需要扳手 xx"
                }
                if (nbt['mScrewdriver'] == 0) {
                    result += '\\n' + '注意 !' + TAB + ALIGNRIGHT + RED + "xx 需要螺丝刀 xx"
                }
                if (nbt['mSoftHammer'] == 0) {
                    result += '\\n' + '注意 !' + TAB + ALIGNRIGHT + RED + "xx 需要软锤 xx"
                }
                if (nbt['mHardHammer'] == 0) {
                    result += '\\n' + '注意 !' + TAB + ALIGNRIGHT + RED + "xx 需要锤子 xx"
                }
                if (nbt['mSolderingTool'] == 0) {
                    result += '\\n' + '注意 !' + TAB + ALIGNRIGHT + RED + "xx 需要电烙铁 xx"
                }
                if (nbt['mCrowbar'] == 0) {
                    result += '\\n' + '注意 !' + TAB + ALIGNRIGHT + RED + "xx 需要撬棍 xx"
                }
                return result
            }
        </line>
        <line displayname="内部热量">
            if (nbt['mID'] == 15450)
                return nbt['eHeat'];
        </line>

        <!--RF能量转换器  -->
        <line displayname="输出电压">
            if (nbt['mID'] == 31022) {
                switch (nbt['mTier']) {
                    case 0:
                        return YELLOW + "ULV";
                        break;
                    case 1:
                        return YELLOW + "LV";
                        break;
                    case 2:
                        return YELLOW + "MV";
                        break;
                    case 3:
                        return YELLOW + "HV";
                        break;
                    case 4:
                        return YELLOW + "EV";
                        break;
                    case 5:
                        return YELLOW + "IV";
                        break;
                    case 6:
                        return YELLOW + "LuV";
                        break;
                    case 7:
                        return YELLOW + "ZPM";
                        break;
                    case 8:
                        return YELLOW + "UV";
                        break;
                    case 9:
                        return YELLOW + "MAX";
                        break;
                }
            }
        </line>
        <line displayname="输出电流">
            if (nbt['mID'] == 31022) {
                return YELLOW + nbt['aCurrentOutputAmperage'] + WHITE + " A"
            }
        </line>

        <!--机器/电池箱缓存能量 -->
        <line displayname="hud.msg.energ">
            if (nbt['mStoredEnergy'] != 0) {
                return formatBytes(nbt['mStoredEnergy']) + WHITE + " EU"
            }
        </line>


        <!--机器/电池箱内电池总能量  -->
        <line displayname="电池">
            var a=0;
            for(var i=0;i<nbt['Inventory'].length;i++){
				if(nbt['Inventory'][i]['tag']!=undefined){
					if(nbt['Inventory'][i]['tag']['GT.ItemCharge']!=undefined){
						a=a+nbt['Inventory'][i]['tag']['GT.ItemCharge'];
					}else if(nbt['Inventory'][i]['tag']['charge']!=undefined){
						a=a+nbt['Inventory'][i]['tag']['charge']
					}
				}
            }
            if(a!=0){return formatBytes(a)+WHITE+" EU"}
        </line>

        <!--机器里液体存量  -->
        <line displayname="hud.msg.common.LiquidAmount">
            if (nbt['mFluid']['Amount'] != undefined) {
                return GREEN + fluidName(nbt['mFluid']['FluidName']) + " : " + WHITE + nbt['mFluid']['Amount'] + WHITE + " mB"
            }
        </line>

        <!--机器/大型机器：物品产物-->
        <line displayname="hud.msg.greg.output">
            if(nbt['mActive']==1 &&nbt['mOutputItem0']!=undefined){
				var result=YELLOW+nbt['mOutputItem0']['Count']+"个"+GREEN+name(nbt['mOutputItem0']);
				for (i=1; i<=8; i++){
					if (nbt['mOutputItem'+i]!=undefined){
						result +=
						'\\n副产物'+i+TAB+ALIGNRIGHT+YELLOW+nbt['mOutputItem'+i]['Count']+"个"+GREEN+name(nbt['mOutputItem'+i]);
					}
				}
				return result;
            }
        </line>

        <!--机器：液体产物 -->
        <line displayname="流体输出">
            if (nbt['mOutputFluid']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluid']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluid']['FluidName'])
            }
        </line>

        <!--大型机器：液体产物-->
        <line displayname="流体输出">
            if (nbt['mOutputFluids0']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids0']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids0']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids1']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids1']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids1']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids2']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids2']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids2']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids3']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids3']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids3']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids4']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids4']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids4']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids5']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids5']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids5']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids6']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids6']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids6']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids7']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids7']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids7']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids8']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids8']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids8']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids9']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids9']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids9']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids10']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids10']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids10']['FluidName'])
            }
        </line>
        <line displayname="流体输出">
            if (nbt['mOutputFluids11']['Amount'] != undefined) {
                return WHITE + nbt['mOutputFluids11']['Amount'] + YELLOW + "mB " + GREEN + fluidName(nbt['mOutputFluids11']['FluidName'])
            }
        </line>

        <!--机器状态  -->
        <line>
            if (nbt['mAllowInputFromOutputSide'] == 1) {
                return "输出面允许输入"
            }
        </line>

        <!-- 算力 -->
        <line displayname="最低算力需求">
            if (nbt['eDataR'] != undefined && nbt['mActive'] == 1 && nbt['eDataR'] != 0) {
                return nbt['eDataR'] + "/s"
            }
        </line>
        <line displayname="当前算力">
            if (nbt['eDataA'] != undefined && nbt['mActive'] == 1) {
                return nbt['eDataA'] + "/s"
            }
        </line>
        <line displayname="总算力需求">
            if (nbt['eComputationRequired'] != undefined && nbt['mActive'] == 1) {
                return nbt['eComputationRequired'] / 20
            }
        </line>
        <line displayname="进度">
            if (nbt['eComputationRequired'] != undefined && nbt['mActive'] == 1) {
                return ((nbt['eComputationRequired'] - nbt['eComputationRemaining']) / 20) + "/" + (nbt['eComputationRequired'] / 20)
            }
        </line>
    </tileentity>

    <!--线缆/管道  -->
    <tileentity id="BaseMetaPipeEntity">
        <line displayname="额定电压">
            var vol = getCableVoltage(nbt['mID']);
            if (vol != null) {
                return GREEN + getFormatNumber(vol) + ' (' + getColoredTier(vol) + GREEN + ')' + WHITE + ' EU/t'
            }
        </line>
        <line displayname="额定电流">
            var ampere = getAmperage(nbt['mID']);
            if (ampere != null) {
                return YELLOW + getFormatNumber(ampere) + WHITE + ' 安'
            }
        </line>
        <line displayname='线损/米/安'>
            var loss = getCableLoss(nbt['mID']);
            if (loss != null) {
                return RED + getFormatNumber(loss) + WHITE + ' 伏'
            }
        </line>
    </tileentity>
</oo>
